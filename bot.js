const TelegramBot = require("node-telegram-bot-api");
const Database = require('better-sqlite3');
const db = new Database('database.db');



// Thay token bot c·ªßa b·∫°n v√†o ƒë√¢y
const TOKEN = "7733831697:AAGSddOxoMeEm12LoxRd3t8ubLM6EnyUf78";
const bot = new TelegramBot(TOKEN, { polling: true });

// K·∫øt n·ªëi SQLite Database
const db = new sqlite3.Database("./database.db");

// T·∫°o b·∫£ng n·∫øu ch∆∞a c√≥
db.run(`CREATE TABLE IF NOT EXISTS customers (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    contact TEXT NOT NULL UNIQUE,
    item TEXT DEFAULT 'Kh√°ch h√†ng m·ªõi',
    start_date TEXT DEFAULT '',
    expiry_date TEXT DEFAULT ''
)`);

db.run(`CREATE TABLE IF NOT EXISTS warehouse (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    item TEXT NOT NULL,
    info TEXT NOT NULL,
    quantity INTEGER NOT NULL,
	account_info TEXT DEFAULT NULL
)`);

db.run(`CREATE TABLE IF NOT EXISTS customer_items (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    customer_id INTEGER NOT NULL,
    item_id INTEGER NOT NULL,
    start_date TEXT NOT NULL,
    expiry_date TEXT NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers(id),
    FOREIGN KEY (item_id) REFERENCES warehouse(id)
)`);

// L·ªánh th√™m kh√°ch h√†ng
bot.onText(/\/addkh (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const contact = match[1].trim();

    try {
        console.log(`‚ûï ƒêang th√™m kh√°ch h√†ng: ${contact}`);
        await new Promise((resolve, reject) => {
            db.run("INSERT INTO customers (contact) VALUES (?)", [contact], (err) => {
                if (err) reject(err);
                else resolve();
            });
        });
        bot.sendMessage(chatId, `‚úÖ ƒê√£ th√™m kh√°ch h√†ng m·ªõi: ${contact}`);
    } catch (error) {
        console.error("‚ùå L·ªói khi th√™m kh√°ch h√†ng:", error);
        bot.sendMessage(chatId, "‚ùå L·ªói khi th√™m kh√°ch h√†ng. C√≥ th·ªÉ kh√°ch h√†ng ƒë√£ t·ªìn t·∫°i.");
    }
});

// L·ªánh l·∫•y h√†ng h√≥a cho kh√°ch h√†ng, ki·ªÉm tra v√† c·∫≠p nh·∫≠t th·ªùi gian thu√™
bot.onText(/\/gethh (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const itemId = parseInt(match[1], 10);

    try {
        console.log(`üîç Ki·ªÉm tra m·∫∑t h√†ng ID: ${itemId}`);
        const itemRow = await new Promise((resolve, reject) => {
            db.get("SELECT item, quantity FROM warehouse WHERE id = ?", [itemId], (err, row) => {
                if (err) reject(err);
                else resolve(row);
            });
        });

        if (!itemRow || itemRow.quantity <= 0) {
            bot.sendMessage(chatId, "üö´ M·∫∑t h√†ng n√†y kh√¥ng c√≤n trong kho.");
            return;
        }

        console.log("üìú ƒêang l·∫•y danh s√°ch kh√°ch h√†ng");
        const customers = await new Promise((resolve, reject) => {
            db.all("SELECT id, contact FROM customers", [], (err, rows) => {
                if (err) reject(err);
                else resolve(rows);
            });
        });

        if (customers.length === 0) {
            bot.sendMessage(chatId, "üö´ Kh√¥ng c√≥ kh√°ch h√†ng n√†o trong h·ªá th·ªëng. H√£y th√™m kh√°ch h√†ng b·∫±ng l·ªánh /addkh.");
            return;
        }

        let response = `üìú Ch·ªçn kh√°ch h√†ng ƒë·ªÉ nh·∫≠n h√†ng h√≥a (${itemRow.item}):\n`;
        customers.forEach((row) => {
            response += `ID: ${row.id} | ${row.contact}\n`;
        });
        response += "\nG·ª≠i ID kh√°ch h√†ng mu·ªën nh·∫≠n h√†ng.";

        const responseMsg = await bot.sendMessage(chatId, response);
        const customerResponse = await new Promise((resolve) => {
            bot.once("message", resolve);
        });
        const customerId = parseInt(customerResponse.text, 10);
        if (isNaN(customerId)) {
            bot.sendMessage(chatId, "‚ùå ID kh√°ch h√†ng kh√¥ng h·ª£p l·ªá.");
            return;
        }

        console.log(`‚úÖ Kh√°ch h√†ng ID: ${customerId} ƒë∆∞·ª£c ch·ªçn`);
        await bot.sendMessage(chatId, "Nh·∫≠p s·ªë th√°ng thu√™ bao:");
        const monthResponse = await new Promise((resolve) => {
            bot.once("message", resolve);
        });
        const months = parseInt(monthResponse.text, 10);
        if (isNaN(months) || months <= 0) {
            bot.sendMessage(chatId, "‚ùå S·ªë th√°ng kh√¥ng h·ª£p l·ªá.");
            return;
        }

        console.log(`üìÜ Th·ªùi gian thu√™: ${months} th√°ng`);
        const startDate = new Date().toISOString().split("T")[0];
        const expiryDate = new Date();
        expiryDate.setDate(expiryDate.getDate() + months * 30);
        const expiryDateStr = expiryDate.toISOString().split("T")[0];

        console.log("üîé Ki·ªÉm tra ƒë∆°n h√†ng tr∆∞·ªõc ƒë√≥");
        const existingRow = await new Promise((resolve, reject) => {
            db.get("SELECT id, expiry_date FROM customer_items WHERE customer_id = ? AND item_id = ?", [customerId, itemId], (err, row) => {
                if (err) reject(err);
                else resolve(row);
            });
        });

        if (existingRow) {
            console.log("üîÑ C·ªông d·ªìn th·ªùi gian thu√™");
            let newExpiryDate = new Date(existingRow.expiry_date);
            newExpiryDate.setDate(newExpiryDate.getDate() + months * 30);
            const newExpiryDateStr = newExpiryDate.toISOString().split("T")[0];
            await new Promise((resolve, reject) => {
                db.run("UPDATE customer_items SET expiry_date = ? WHERE id = ?", [newExpiryDateStr, existingRow.id], (err) => {
                    if (err) reject(err);
                    else resolve();
                });
            });
            bot.sendMessage(chatId, `‚úÖ ƒê√£ c·ªông d·ªìn th·ªùi gian thu√™ m·∫∑t h√†ng ID ${itemId} cho kh√°ch h√†ng ID ${customerId}. H·∫°n m·ªõi: ${newExpiryDateStr}.`);
        } else {
            console.log("‚ûï Th√™m ƒë∆°n h√†ng m·ªõi");
            await new Promise((resolve, reject) => {
                db.run("INSERT INTO customer_items (customer_id, item_id, start_date, expiry_date) VALUES (?, ?, ?, ?)",
                    [customerId, itemId, startDate, expiryDateStr],
                    (err) => {
                        if (err) reject(err);
                        else resolve();
                    }
                );
            });
            bot.sendMessage(chatId, `‚úÖ Kh√°ch h√†ng ID ${customerId} ƒë√£ nh·∫≠n m·∫∑t h√†ng ID ${itemId}, thu√™ trong ${months} th√°ng. Kho ƒë√£ c·∫≠p nh·∫≠t.`);
        }

        console.log("üìâ Tr·ª´ 1 s·∫£n ph·∫©m trong kho");
        await new Promise((resolve, reject) => {
            db.run("UPDATE warehouse SET quantity = quantity - 1 WHERE id = ?", [itemId], (err) => {
                if (err) reject(err);
                else resolve();
            });
        });
        console.log("‚úÖ X·ª≠ l√Ω ho√†n t·∫•t");
    } catch (error) {
        console.error("‚ùå L·ªñI: ", error);
        bot.sendMessage(chatId, "‚ùå ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu.");
    }
});


// L·ªánh ki·ªÉm tra danh s√°ch kh√°ch h√†ng v√† tr·∫°ng th√°i thu√™ h√†ng
bot.onText(/\/list/, async (msg) => {
    const chatId = msg.chat.id;

    try {
        console.log("üìã ƒêang l·∫•y danh s√°ch kh√°ch h√†ng...");
        const customers = await new Promise((resolve, reject) => {
            db.all(`SELECT c.id, c.contact, COALESCE(w.item, 'Ch∆∞a thu√™ h√†ng') AS item, ci.expiry_date 
                    FROM customers c 
                    LEFT JOIN customer_items ci ON c.id = ci.customer_id 
                    LEFT JOIN warehouse w ON ci.item_id = w.id`, 
                [], (err, rows) => {
                if (err) reject(err);
                else resolve(rows);
            });
        });

        if (customers.length === 0) {
            bot.sendMessage(chatId, "üö´ Kh√¥ng c√≥ kh√°ch h√†ng n√†o trong h·ªá th·ªëng.");
            return;
        }

        let response = "üìú Danh s√°ch kh√°ch h√†ng:\n";
        customers.forEach((row) => {
            if (row.expiry_date) {
                // T√≠nh s·ªë ng√†y c√≤n l·∫°i
                const today = new Date();
                const expiryDate = new Date(row.expiry_date);
                const daysLeft = Math.max(Math.ceil((expiryDate - today) / (1000 * 60 * 60 * 24)), 0);
                response += `ID: ${row.id} | ${row.contact} | ${row.item} | C√≤n l·∫°i: ${daysLeft} ng√†y\n`;
            } else {
                response += `ID: ${row.id} | ${row.contact} | Kh√°ch h√†ng m·ªõi\n`;
            }
        });
        bot.sendMessage(chatId, response);
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y danh s√°ch kh√°ch h√†ng:", error);
        bot.sendMessage(chatId, "‚ùå L·ªói khi l·∫•y danh s√°ch kh√°ch h√†ng.");
    }
});

// L·ªánh ch·ªânh s·ª≠a s·ªë l∆∞·ª£ng h√†ng trong kho
bot.onText(/\/edithh (\d+) ([+-]\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const itemId = parseInt(match[1], 10);
    const quantityChange = parseInt(match[2], 10);

    try {
        console.log(`üõ† Ch·ªânh s·ª≠a s·ªë l∆∞·ª£ng h√†ng ID: ${itemId}, Thay ƒë·ªïi: ${quantityChange} s·∫£n ph·∫©m`);
        
        const updatedRows = await new Promise((resolve, reject) => {
            db.run("UPDATE warehouse SET quantity = quantity + ? WHERE id = ?", 
                [quantityChange, itemId], function (err) {
                if (err) reject(err);
                else resolve(this.changes);
            });
        });

        if (updatedRows > 0) {
            bot.sendMessage(chatId, `‚úÖ ƒê√£ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng h√†ng ID ${itemId} ${quantityChange > 0 ? 'th√™m' : 'gi·∫£m'} ${Math.abs(quantityChange)} s·∫£n ph·∫©m.`);
        } else {
            bot.sendMessage(chatId, "üö´ Kh√¥ng t√¨m th·∫•y m·∫∑t h√†ng trong kho.");
        }
    } catch (error) {
        console.error("‚ùå L·ªói khi ch·ªânh s·ª≠a s·ªë l∆∞·ª£ng h√†ng:", error);
        bot.sendMessage(chatId, "‚ùå L·ªói khi ch·ªânh s·ª≠a s·ªë l∆∞·ª£ng h√†ng.");
    }
});

// L·ªánh th√™m h√†ng v√†o kho
bot.onText(/\/addkho (.+) \| (.+) \| (\d+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const item = match[1].trim();
    const info = match[2].trim();
    const quantity = parseInt(match[3], 10);

    db.get("SELECT id, quantity FROM warehouse WHERE item = ? AND info = ?", [item, info], (err, row) => {
        if (err) {
            bot.sendMessage(chatId, "‚ùå L·ªói database khi ki·ªÉm tra kho h√†ng.");
            console.error(err);
            return;
        }
        if (row) {
            // N·∫øu tr√πng m·∫∑t h√†ng v√† th√¥ng tin, c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
            const newQuantity = row.quantity + quantity;
            db.run("UPDATE warehouse SET quantity = ? WHERE id = ?", [newQuantity, row.id], (updateErr) => {
                if (updateErr) {
                    bot.sendMessage(chatId, "‚ùå L·ªói khi c·∫≠p nh·∫≠t kho h√†ng.");
                    console.error(updateErr);
                    return;
                }
                bot.sendMessage(chatId, `‚úÖ ƒê√£ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng ${item} (${info}) l√™n ${newQuantity} s·∫£n ph·∫©m.`);
            });
        } else {
            // N·∫øu kh√°c th√¥ng tin, th√™m m·ªõi v√†o kho
            db.run("INSERT INTO warehouse (item, info, quantity) VALUES (?, ?, ?)", [item, info, quantity], (insertErr) => {
                if (insertErr) {
                    bot.sendMessage(chatId, "‚ùå L·ªói khi th√™m h√†ng v√†o kho.");
                    console.error(insertErr);
                    return;
                }
                bot.sendMessage(chatId, `‚úÖ ƒê√£ th√™m ${quantity} ${item} (${info}) v√†o kho.`);
            });
        }
    });
});

// L·ªánh ki·ªÉm tra kho h√†ng t·ªïng h·ª£p
bot.onText(/\/kho$/, (msg) => {
    db.all("SELECT item, SUM(quantity) as total FROM warehouse GROUP BY item", [], (err, rows) => {
        if (err) {
            bot.sendMessage(msg.chat.id, "‚ùå L·ªói database khi l·∫•y danh s√°ch kho h√†ng.");
            console.error(err);
            return;
        }
        if (rows.length === 0) {
            bot.sendMessage(msg.chat.id, "üö´ Kho tr·ªëng.");
            return;
        }
        let response = "üì¶ Kho h√†ng:\n";
        rows.forEach((row) => {
            response += `${row.item}: ${row.total} s·∫£n ph·∫©m\n`;
        });
        bot.sendMessage(msg.chat.id, response);
    });
});

// L·ªánh ki·ªÉm tra chi ti·∫øt kho h√†ng theo m·∫∑t h√†ng c·ª• th·ªÉ
bot.onText(/\/kho (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const item = match[1].trim();

    db.all("SELECT id, info, quantity FROM warehouse WHERE item = ?", [item], (err, rows) => {
        if (err) {
            bot.sendMessage(chatId, "‚ùå L·ªói database khi l·∫•y th√¥ng tin kho h√†ng.");
            console.error(err);
            return;
        }
        if (rows.length === 0) {
            bot.sendMessage(chatId, `üö´ Kh√¥ng c√≥ m·∫∑t h√†ng n√†o trong kho v·ªõi t√™n: ${item}.`);
            return;
        }
        let response = `üì¶ Chi ti·∫øt kho h√†ng cho ${item}:\n`;
        rows.forEach((row) => {
            response += `ID: ${row.id} | ${row.info} | ${row.quantity} s·∫£n ph·∫©m\n`;
        });
        bot.sendMessage(chatId, response);
    });
});

// L·ªánh ki·ªÉm tra danh s√°ch ID h√†ng h√≥a
bot.onText(/\/idhh/, (msg) => {
    db.all("SELECT id, item, info, quantity FROM warehouse", [], (err, rows) => {
        if (err) {
            bot.sendMessage(msg.chat.id, "‚ùå L·ªói database khi l·∫•y danh s√°ch h√†ng h√≥a.");
            console.error(err);
            return;
        }
        if (rows.length === 0) {
            bot.sendMessage(msg.chat.id, "üö´ Kh√¥ng c√≥ h√†ng h√≥a n√†o trong kho.");
            return;
        }
        let response = "üì¶ Danh s√°ch ID h√†ng h√≥a:\n";
        rows.forEach((row) => {
            response += `ID: ${row.id} | ${row.item} (${row.info}) | S·ªë l∆∞·ª£ng: ${row.quantity}\n`;
        });
        bot.sendMessage(msg.chat.id, response);
    });
});

// L·ªánh c·∫≠p nh·∫≠t t√†i kho·∫£n/m·∫≠t kh·∫©u c·ªßa m·∫∑t h√†ng
bot.onText(/\/updatehh (\d+)\s*\|?\s*(.*)?/, async (msg, match) => {
    const chatId = msg.chat.id;
    const itemId = parseInt(match[1], 10);
    const accountInfo = match[2] ? match[2].trim() : null;

    if (!accountInfo) {
        bot.sendMessage(chatId, "‚ö†Ô∏è B·∫°n ch∆∞a nh·∫≠p th√¥ng tin t√†i kho·∫£n/m·∫≠t kh·∫©u. N·∫øu kh√¥ng mu·ªën thay ƒë·ªïi, h√£y ƒë·ªÉ tr·ªëng.");
        return;
    }

    try {
        console.log(`üîÑ ƒêang c·∫≠p nh·∫≠t th√¥ng tin cho m·∫∑t h√†ng ID: ${itemId}`);
        
        const updatedRows = await new Promise((resolve, reject) => {
            db.run("UPDATE warehouse SET account_info = ? WHERE id = ?", 
                [accountInfo, itemId], function (err) {
                if (err) reject(err);
                else resolve(this.changes);
            });
        });

        if (updatedRows > 0) {
            bot.sendMessage(chatId, `‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n/m·∫≠t kh·∫©u cho m·∫∑t h√†ng ID ${itemId}.`);
        } else {
            bot.sendMessage(chatId, "üö´ Kh√¥ng t√¨m th·∫•y m·∫∑t h√†ng trong kho.");
        }
    } catch (error) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin m·∫∑t h√†ng:", error);
        bot.sendMessage(chatId, "‚ùå L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin m·∫∑t h√†ng.");
    }
});

// L·ªánh ki·ªÉm tra th√¥ng tin t√†i kho·∫£n/m·∫≠t kh·∫©u c·ªßa m·∫∑t h√†ng
bot.onText(/\/infohh (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const itemId = parseInt(match[1], 10);

    try {
        console.log(`üîç Ki·ªÉm tra th√¥ng tin t√†i kho·∫£n/m·∫≠t kh·∫©u c·ªßa m·∫∑t h√†ng ID: ${itemId}`);
        
        const itemInfo = await new Promise((resolve, reject) => {
            db.get("SELECT item, account_info FROM warehouse WHERE id = ?", [itemId], (err, row) => {
                if (err) reject(err);
                else resolve(row);
            });
        });

        if (itemInfo) {
            const accountInfo = itemInfo.account_info ? itemInfo.account_info : "üö´ Ch∆∞a c√≥ th√¥ng tin t√†i kho·∫£n/m·∫≠t kh·∫©u.";
            bot.sendMessage(chatId, `üìú **Th√¥ng tin m·∫∑t h√†ng:**\nüÜî ID: ${itemId}\nüì¶ T√™n: ${itemInfo.item}\nüîë T√†i kho·∫£n: ${accountInfo}`);
        } else {
            bot.sendMessage(chatId, "üö´ Kh√¥ng t√¨m th·∫•y m·∫∑t h√†ng trong kho.");
        }
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin m·∫∑t h√†ng:", error);
        bot.sendMessage(chatId, "‚ùå L·ªói khi l·∫•y th√¥ng tin m·∫∑t h√†ng.");
    }
});

// L·ªánh x√≥a kh√°ch h√†ng
bot.onText(/\/removekh (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const customerId = parseInt(match[1], 10);

    try {
        console.log(`üóë X√≥a kh√°ch h√†ng ID: ${customerId}`);
        
        // X√≥a kh√°ch h√†ng kh·ªèi b·∫£ng customer_items tr∆∞·ªõc
        await new Promise((resolve, reject) => {
            db.run("DELETE FROM customer_items WHERE customer_id = ?", [customerId], (err) => {
                if (err) reject(err);
                else resolve();
            });
        });

        // X√≥a kh√°ch h√†ng kh·ªèi b·∫£ng customers
        const deletedRows = await new Promise((resolve, reject) => {
            db.run("DELETE FROM customers WHERE id = ?", [customerId], function (err) {
                if (err) reject(err);
                else resolve(this.changes);
            });
        });

        if (deletedRows > 0) {
            bot.sendMessage(chatId, `‚úÖ ƒê√£ x√≥a kh√°ch h√†ng ID ${customerId}.`);
        } else {
            bot.sendMessage(chatId, "üö´ Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng ƒë·ªÉ x√≥a.");
        }
    } catch (error) {
        console.error("‚ùå L·ªói khi x√≥a kh√°ch h√†ng:", error);
        bot.sendMessage(chatId, "‚ùå L·ªói khi x√≥a kh√°ch h√†ng.");
    }
});

// L·ªánh x√≥a m·∫∑t h√†ng
bot.onText(/\/removehh (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const itemId = parseInt(match[1], 10);

    try {
        console.log(`üóë X√≥a m·∫∑t h√†ng ID: ${itemId}`);
        
        // X√≥a m·∫∑t h√†ng kh·ªèi b·∫£ng customer_items tr∆∞·ªõc
        await new Promise((resolve, reject) => {
            db.run("DELETE FROM customer_items WHERE item_id = ?", [itemId], (err) => {
                if (err) reject(err);
                else resolve();
            });
        });

        // X√≥a m·∫∑t h√†ng kh·ªèi b·∫£ng warehouse
        const deletedRows = await new Promise((resolve, reject) => {
            db.run("DELETE FROM warehouse WHERE id = ?", [itemId], function (err) {
                if (err) reject(err);
                else resolve(this.changes);
            });
        });

        if (deletedRows > 0) {
            bot.sendMessage(chatId, `‚úÖ ƒê√£ x√≥a m·∫∑t h√†ng ID ${itemId}.`);
        } else {
            bot.sendMessage(chatId, "üö´ Kh√¥ng t√¨m th·∫•y m·∫∑t h√†ng ƒë·ªÉ x√≥a.");
        }
    } catch (error) {
        console.error("‚ùå L·ªói khi x√≥a m·∫∑t h√†ng:", error);
        bot.sendMessage(chatId, "‚ùå L·ªói khi x√≥a m·∫∑t h√†ng.");
    }
});

console.log("ü§ñ Bot Telegram ƒëang ch·∫°y...");
